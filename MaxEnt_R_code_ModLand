## Set-up buffer and size

```{r MaxEnt Parameters, message=FALSE, warning=FALSE,echo=TRUE}

bf<-15000

if(!require(devtools)){
  install.packages("devtools")
}
devtools::source_url("https://raw.githubusercontent.com/shandongfx/nimbios_enm/master/Appendix2_prepPara.R")
myparameters <- prepPara(userfeatures="LQH",  
                          betamultiplier=2)

```

## Environmental variables -4000

```{r raster data -4000 BP, message=FALSE, warning=FALSE}

## Importing gridraster

#physical landscape
r1 <- rast("~/R analisi/ModLand/data/raster/rec_elev.tiff")
r1<-aggregate(r1, fact=3, fun = 'mean')

r2 <- rast("~/R analisi/ModLand/data/raster/aspect.tiff")
r3 <- rast("~/R analisi/ModLand/data/raster/slope.tiff")
r4 <- rast("~/R analisi/ModLand/data/raster/rec_TRI.tiff")


#Soil
r5 <- rast("~/GIS_ModLandWGS84/raster/Carta_ecopedo_ita.tif")
r6 <- rast("~/GIS_ModLandWGS84/raster/Carta_geo_ita.tif")

#Hidrology
r7 <- rast("~/R analisi/ModLand/data/raster/TWI.tif")

#resample rasters
r2 <- resample(r2, r1, method = "near")
r3 <- resample(r3, r1, method = "near")
r4 <- resample(r4, r1, method = "near")
r5 <- resample(r5, r1, method = "near")
r6 <- resample(r6, r1, method = "near")
r7 <- resample(r7, r1, method = "near")


######## Bioclimatic data processing ########


### Extracting climatic gridraster
library(pastclim)

yBP<- -4000

bio01<- region_slice(time_bp=yBP,
                     bio_variables = "bio01",
                     dataset= "Beyer2020",
                     path_to_nc = NULL,
                     ext = c(11.283872604,21.787487030, 37.029506683,44.070816040),
                     crop = study_area
)


bio12<- region_slice(time_bp=yBP,
                     bio_variables = "bio12",
                     dataset= "Beyer2020",
                     path_to_nc = NULL,
                     ext = c(11.283872604,21.787487030, 37.029506683,44.070816040),
                     crop = study_area
)

bio13<- region_slice(time_bp=yBP,
                     bio_variables = "bio13",
                     dataset= "Beyer2020",
                     path_to_nc = NULL,
                     ext = c(11.283872604,21.787487030, 37.029506683,44.070816040),
                     crop = study_area
)

bio14<- region_slice(time_bp=yBP,
                     bio_variables = "bio14",
                     dataset= "Beyer2020",
                     path_to_nc = NULL,
                     ext = c(11.283872604,21.787487030, 37.029506683,44.070816040),
                     crop = study_area
)
bio16<- region_slice(time_bp=yBP,
                     bio_variables = "bio16",
                     dataset= "Beyer2020",
                     path_to_nc = NULL,
                     ext = c(11.283872604,21.787487030, 37.029506683,44.070816040),
                     crop = study_area
)
bio17<- region_slice(time_bp=yBP,
                     bio_variables = "bio17",
                     dataset= "Beyer2020",
                     path_to_nc = NULL,
                     ext = c(11.283872604,21.787487030, 37.029506683,44.070816040),
                     crop = study_area
)
bio19<- region_slice(time_bp=yBP,
                     bio_variables = "bio19",
                     dataset= "Beyer2020",
                     path_to_nc = NULL,
                     ext = c(11.283872604,21.787487030, 37.029506683,44.070816040),
                     crop = study_area
)


bio01<- focal(bio01,w=3, fun = mean,na.policy="only", na.rm = TRUE) #funzione che colma le celle NA del raster estratto precedentemente
bio12<- focal(bio12,w=3, fun = mean,na.policy="only", na.rm = TRUE) 
bio13<- focal(bio13,w=3, fun = mean,na.policy="only", na.rm = TRUE) 
bio14<- focal(bio14,w=3, fun = mean,na.policy="only", na.rm = TRUE) 
bio16<- focal(bio16,w=3, fun = mean,na.policy="only", na.rm = TRUE) 
bio17<- focal(bio17,w=3, fun = mean,na.policy="only", na.rm = TRUE) 
bio19<- focal(bio19,w=3, fun = mean,na.policy="only", na.rm = TRUE) 

rx <- aggregate(r1, fact = 15, fun = "mean")
plot(rx)


r8 <- crop(resample(bio01, rx, method = "near"), rx, mask=T)
r9 <- crop(resample(bio12, rx, method = "near"), rx, mask=T)
r12 <- crop(resample(bio13, rx, method = "near"), rx, mask=T)
r13 <- crop(resample(bio14, rx, method = "near"), rx, mask=T)
r14 <- crop(resample(bio16, rx, method = "near"), rx, mask=T)
r15 <- crop(resample(bio17, rx, method = "near"), rx, mask=T)
r16 <- crop(resample(bio19, rx, method = "near"), rx, mask=T)


m <- matrix(1, ncol=125, nrow=125)

r8 <- focal(r8, m, fun="mean", na.rm=TRUE, NAonly=TRUE, pad=TRUE) 
r9 <- focal(r9, m, fun="mean", na.rm=TRUE, NAonly=TRUE, pad=TRUE) 
r12 <- focal(r12, m, fun="mean", na.rm=TRUE, NAonly=TRUE, pad=TRUE) 
r13 <- focal(r13, m, fun="mean", na.rm=TRUE, NAonly=TRUE, pad=TRUE) 
r14 <- focal(r14, m, fun="mean", na.rm=TRUE, NAonly=TRUE, pad=TRUE) 
r15 <- focal(r15, m, fun="mean", na.rm=TRUE, NAonly=TRUE, pad=TRUE) 
r16 <- focal(r16, m, fun="mean", na.rm=TRUE, NAonly=TRUE, pad=TRUE) 



r8 <- crop(resample(r8, r1, method = "near"), r1, mask=T)
r9 <- crop(resample(r9, r1, method = "near"), r1, mask=T)
r12 <- crop(resample(r12, r1, method = "near"), r1, mask=T)
r13 <- crop(resample(r13, r1, method = "near"), r1, mask=T)
r14 <- crop(resample(r14, r1, method = "near"), r1, mask=T)
r15 <- crop(resample(r15, r1, method = "near"), r1, mask=T)
r16 <- crop(resample(r16, r1, method = "near"), r1, mask=T)




#### GHI ####
ghi<-rast("/Users/enric/Documenti/GIS_ModLandWGS84/raster/GHI.tif")
r17<-crop(resample(ghi,r1,method = "near"),r1, mask=T)


#Convert to raster
r1<-raster(r1)
r2<-raster(r2)
r3<-raster(r3)
r4<-raster(r4)
r5<-raster(r5)
#r6<-raster(r6)
r7<-raster(r7)
r8<-raster(r8)
r9<-raster(r9)
r12<-raster(r12)
r13<-raster(r13)
r14<-raster(r14)
r15<-raster(r15)
r16<-raster(r16)
r17<-raster(r17)

#rename some rastergrids
names(r1)<-"Elevation"
names(r2)<-"Aspect"
names(r4)<-"TRI"
names(r5)<-"Soil map"
#names(r6)<-"Geological map"
names(r8)<-"Bio01"
names(r9)<-"Bio12"
names(r12)<-"Bio13"
names(r13)<-"Bio14"
names(r14)<-"Bio16"
names(r15)<-"Bio17"
names(r16)<-"Bio19"
names(r17)<-"GHI"

env <- stack(r1,r2,r3,r4,r5,r7,r8,r9,r16,r17)


library(RColorBrewer)
cols <- brewer.pal(9, "Spectral")
pal <- colorRampPalette(cols)

plot(env, col=pal(20))

```


## Model 1: combining cereal presence poitns and settlements from different periods

```{r occurence data Cereals, echo=FALSE, message=FALSE, warning=FALSE}

library(terra)
library(dismo)
library(raster)
study_area <- vect("data/studyareaWGS84.shp")
s1<-shapefile("data/sites_cereal_data.shp")
s2<-shapefile("data/sites_all_phases.shp")
plot(study_area)
plot(s2, add = T, col = "red")
plot(s1, add = T, col = "black", pch=19)


slca<-s2[which(s2$`Late Coppe`=='x' & s2$evidenze == 'Arch. exc.'),]
seba<-s2[which(s2$`Early Bron`=='x' & s2$evidenze == 'Arch. exc.'),]
smba<-s2[which(s2$`Middle Bro`=='x'& s2$evidenze == 'Arch. exc.'),]
slba1<-s2[which(s2$`Late Bronz`=='x' & s2$evidenze == 'Arch. exc.'),]
slba2<-s2[which(s2$`Late Bro_1`=='x' & s2$evidenze == 'Arch. exc.'),]

selected <- sample(1:nrow(slca),  nrow(slca)*0.5)
slca_sel<- slca[selected,]
selected <- sample(1:nrow(seba),  nrow(seba)*0.2)
seba_sel<- seba[selected,]
selected <- sample(1:nrow(smba),  nrow(smba)*0.2)
smba_sel<- smba[selected,]
selected <- sample(1:nrow(slba1),  nrow(slba1)*0.2)
slba1_sel<- slba1[selected,]
selected <- sample(1:nrow(slba2),  nrow(slba2)*0.2)
slba2_sel<- slba2[selected,]

s3<-rbind(s1,slca_sel,seba_sel,smba_sel,slba1_sel,slba2_sel)
plot(s3)

# this creates a 4-decimal-degree buffer around the
# occurrence data
occ_buff <- buffer(s3, bf)

# plot the first element ([[1]]) in the raster stack
plot(study_area)
plot(occ_buff, add = T, col = "blue")  # adds buffer polygon to the plot
plot(s3, add = T, col = "red")  # adds occurrence data to the plot


# crop study area to a manageable extent (rectangle shaped)
env1 <- crop(env,extent(occ_buff))  

# the 'study area' created by extracting the buffer area from the raster stack
env1 <- mask(env,occ_buff)
# output will still be a raster stack, just of the study area

# stacking the bioclim variables to process them at one go
plot(env1, col=pal(20))

plot(env1[[1]], col=pal(20))
# plot the final occurrence data on the environmental layer
plot(s3,add =T, col = "red")  # the 'add=T' tells R to put the incoming data on the existing layer



set.seed(1) 
bg <- sampleRandom(x=env1,
                   size= nrow(s3) * 4,
                   na.rm=T, #removes the 'Not Applicable' points  
                   sp=T) # return spatial points 

plot(env1[[1]])
# add the background points to the plotted raster
plot(bg,add=T, pch=19, cex=0.8) 
# add the occurrence data to the plotted raster
plot(s3,add=T,col="red", pch=19, cex=0.8)
legend(17, 42.7, legend=c("occ sites", "bg points"),
       col=c("red", "black"), pch=19, cex=0.8)


# get the same random sample for training and testing
set.seed(1)



# randomly select a subdataset for training
selected <- sample(  1:nrow(s3),  nrow(s3)*0.5) #<-- il valore di campionamento è inferiore rispetto agli altri dati di presenza, perché il valore è molto basso
#più è basso il valore più è elevato il numero di siti campionati.



occ_train <- s3[selected, ]  # this is the selection to be used for model training
occ_test <- s3[-selected, ] # this is the opposite of the selection which will be used for model testing

p <- extract(env, occ_train)
# env conditions for testing occ
p_test <- extract(env, occ_test)
# extracting env conditions for background
a <- extract(env, bg)


# repeat the number 1 as many numbers as the number of rows
# in p, and repeat 0 as the rows of background points
pa <- c(rep(1, nrow(p)), rep(0, nrow(a)))

# (rep(1,nrow(p)) creating the number of rows as the p data
# set to have the number '1' as the indicator for presence;
# rep(0,nrow(a)) creating the number of rows as the a data
# set to have the number '0' as the indicator for absence;
# the c combines these ones and zeros into a new vector that
# can be added to the Maxent table data frame with the
# environmental attributes of the presence and absence
# locations
pder <- as.data.frame(rbind(p, a))



##3 Maxent models

# train Maxent with tabular data
mod <- maxent(x=pder, ## env conditions
              p=pa,   ## 1:presence or 0:absence
              
              path=paste0("../ModLand/output/maxent_outputs_new/"), ## folder for maxent output; 
              # if we do not specify a folder R will put the results in a temp file, 
              # and it gets messy to read those. . .
              args=myparameters
)
# the maxent functions runs a model in the default settings. To change these parameters,
# you have to tell it what you want...i.e. response curves or the type of features

# [1] "autofeature"           "responsecurves"       
# [3] "jackknife"             "outputformat=logistic"
# [5] "outputfiletype=asc"    "norandomseed"         
# [7] "removeduplicates"      "writeplotdata"        
# [9] "extrapolate"           "doclamp" 

# view the maxent model in a html
mod

# view detailed results
mod@results


#########################################
ped <- predict(mod, env) 



mod_eval_train <- dismo::evaluate(p = p, a = a, model = mod)
print(mod_eval_train)

mod_eval_test <- dismo::evaluate(p = p_test, a = a, model = mod)
print(mod_eval_test)  # training AUC may be higher than testing AUC


cat( "the training AUC is: ",mod_eval_train@auc ,"\n" )

cat( "the testing AUC is: ", mod_eval_test@auc  ,"\n" )


library(RColorBrewer)
cols <- brewer.pal(9, "Spectral")
pal <- colorRampPalette(cols)

plot(ped, main ="MaxEnt output", col=pal(20))  # plot the continuous prediction
